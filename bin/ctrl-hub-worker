#!/usr/bin/env python
"""Command line for Hub worker.
"""
# core modules
import sys
from optparse import OptionParser, OptionGroup

# own modules
import hub.lib.error as error
import hub.lib.config as config
import hub.lib.logger as logger
from hub.lib.worker import WorkerDaemon

#version = common.version
version = '1.3.0'

default_config_file = '/usr/local/pkg/hub/etc/worker.conf'

def main():
    usage = """Usage: %prog [options] [args]

Manage Hub worker

Arguments:
        [start|stop|restart|status]

Examples:
    ctrl-hub-worker [start|stop|restart|status]
    ctrl-hub-worker -c /etc/hub/hub.conf status
"""

    parser = OptionParser(usage, version=version)
    group = OptionGroup(parser, "Common Options")
    group.add_option('--trace', action='store_true',
                          dest='trace', help="debug console logging")
    group.add_option('-v', '--verbose', action='store_true', 
                          dest='verbose', help="verbose console logging")
    group.add_option('-q', '--quiet', action='store_true', 
                          dest='quiet', help="no console logging")
    group.add_option('-c', '--config', action='store', dest='config_file', 
                     metavar='CONF', default=default_config_file,
                     help="config file, [default: %default]")
    parser.add_option_group(group)
        
    (options, args) = parser.parse_args()

    # Setup config
    try:
        conf = config.setup(options.config_file)
    except error.ConfigError, e:
        print e.msg
        raise e

    # Setup logging
    log_level = conf.get('LOGGING', 'log_level', 'info')
    if options.trace:
        log_level = 'debug'
    log_file = conf.get('LOGGING', 'log_file', '/tmp/hub-worker.log')
    log_max_size = conf.get('LOGGING', 'log_max_size', 5242880)  #5MB
    log_retain = conf.get('LOGGING', 'log_retain', 5) 

    log = logger.log_to_file(level=log_level, log_file=log_file,
                             max_size=log_max_size, retain=log_retain,
                             trace=options.trace)
        
    if options.verbose:
        log_level = 'debug'
    if options.quiet:
        log_level = 'critical'
    log = logger.log_to_console(level=log_level, trace=options.trace)

    if len(args) != 1:
        parser.error("Script takes exactly one argument")
    action = args[0]
         
    broker = conf.get('HUB', 'broker')
    pid_file = conf.get('HUB', 'pid_file')
    tasks_dir = conf.get('HUB', 'tasks_dir')
    id = conf.get('HUB', 'id')

    daemon = WorkerDaemon(pid_file)
    if action == 'start':
        log.info('Starting worker, connecting to broker {0}...'.format(
                  broker))
        try:
            daemon.start(broker, tasks_dir, id)
        except Exception, e:
            log.exception(e)
    if action == 'stop':
        log.info('Shutting down worker...')
        try:
            daemon.stop()
        except Exception, e:
            log.exception(e)
    if action == 'restart':
        log.info('Restarting worker...')
        try:
            daemon.restart(broker, tasks_dir, id)
        except Exception, e:
            log.exception(e)
    
                  
if __name__ == '__main__':
    try:
        main()
    except error.ConfigError, e:
        sys.stderr.write(e.msg)
        sys.exit(e.exit_code)
    except Exception, e:
        sys.stderr.write(
            'Sorry, something went wrong, you shouldn\'t be seeing this:'
            '{0}\n'.format(e))
        sys.exit(2)
