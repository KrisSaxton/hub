#!/usr/bin/env python
"""
Command line for Hub client
"""
# core modules
import sys
import fileinput
from optparse import OptionParser, OptionGroup
import json
import pprint

# own modules
import hub.lib.error as error
import hub.lib.config as config
import hub.lib.logger as logger
from hub.lib.client import Client

#version = common.version
version = '1.3.0'

default_config_file = '/usr/local/pkg/hub/etc/client.conf'
default_broker = 'localhost'


def main():
    usage = """Usage: %prog [options] [args]

Manage Hub client

Arguments:
        <job file>

Examples:
    hub-client -b localhost -C /tmp/myjob.json
    hub-client --search
    hub-client -S f8b583ae-9271-11e2-89ba-98fe943f85f6
    hub-client -D f8b583ae-9271-11e2-89ba-98fe943f85f6
    cat /tmp/myjob.json | hub-client -C
"""

    parser = OptionParser(usage, version=version)
    group = OptionGroup(parser, "Common Options")
    group.add_option('--trace', action='store_true',
                     dest='trace', help="debug console logging")
    group.add_option('-v', '--verbose', action='store_true',
                     dest='verbose', help="verbose console logging")
    group.add_option('-q', '--quiet', action='store_true',
                     dest='quiet', help="no console logging")
    group.add_option('-c', '--config', action='store', dest='config_file',
                     metavar='CONF', default=default_config_file,
                     help="config file, [default: %default]")
    group.add_option('-b', '--broker', action='store', dest='broker',
                     metavar='BROKER', default=default_broker,
                     help="broker, [default: %default]")
    group.add_option('-S', '--search', action='store_true',
                     dest='search', help="search for a job")
    group.add_option('-C', '--create', action='store_true',
                     dest='create', help="submit a new job")
    group.add_option('-D', '--delete', action='store_true',
                     dest='delete', help="delete a job")
    group.add_option('-U', '--update', action='store_true',
                     dest='update', help="update a job with new task results")
    parser.add_option_group(group)

    (options, args) = parser.parse_args()

    log_level = 'info'
    if options.verbose:
        log_level = 'debug'
    if options.quiet:
        log_level = 'critical'
    log = logger.log_to_console(level=log_level, trace=options.trace)

    # Setup config
    try:
        conf = config.setup(options.config_file)
    except error.ConfigError, e:
        log.debug(e.msg)
        conf = None

    broker = options.broker
    if options.broker == default_broker:
        try:
            broker = conf.get('HUB', 'broker', default_broker)
        except AttributeError:
            broker = options.broker

    if options.create:
        job = ''
        for line in fileinput.input(args):
            job += line
        log.info('Submitting job to broker {0}...'.format(broker))
        try:
            client = Client(broker)
            response = client.create(job)
        except Exception, e:
            log.exception(e)
        log.info('Successfully submitted job: {0}'.format(response))
    elif options.search:
        try:
            job = args[0]
        except IndexError:
            job = None
        try:
            client = Client(broker)
            response = client.get(job)
        except Exception, e:
            log.exception(e)
        print ""
        try:
            jobrec = json.loads(response)
            try:
                print "Job {0} has completed in: {1}s".format(jobrec['name'],str((jobrec['end_time']-jobrec['start_time'])))
            except KeyError:
                pass
            for task in jobrec['tasks']:
                try:
                    print "Task {0} completed in {1}s".format(task['name'],str((task['end_time']-task['start_time'])) )
                except KeyError:
                    pass
            jobrec = json.dumps(jobrec, indent=4)
        except ValueError:
            jobrec = response
        print ""
        print(jobrec)
        #log.info(response)
    elif options.update:
        task = ''
        for line in fileinput.input(args):
            task += line
        log.info('Submitting task results to broker {0}...'.format(broker))
        try:
            client = Client(broker)
            log.info('Submitting task results {0}...'.format(task))
            response = client.update(task)
        except Exception, e:
            log.exception(e)
        log.info('Successfully submitted task results: {0}'.format(response))
    elif options.delete:
        if len(args) != 1:
            parser.error('Delete requires a job id')
            job = args[0]
            log.info('Submitting job delete request for job: {0}'.format(job))
    else:
        parser.error('One of [-S|--search, -C|--create, -D|--delete] required')


if __name__ == '__main__':
#    try:
    main()
#    except error.ConfigError, e:
#        sys.exit(e.exit_code)
##        sys.stderr.write(e.msg)
#    except Exception, e:
#            'Sorry, something went wrong, you shouldn\'t be seeing this:'
##        sys.stderr.write(
#            '{0}\n'.format(e))
#        sys.exit(2)
